# ----- 분산 분석 + 분포모델
summary(aov(Time~Page,data = session_times))
mean_a <- mean(session_times[session_times['Page']=='Page A','Time'])
mean_b <- mean(session_times[session_times['Page']=='Page B','Time'])
perm_fun <- function(x, n1, n2){
n <- n1 + n2
idx_b <- sample(1:n,n1) #<- 1부터 n까지의 수에서 n1개를 추출
idx_a <- setdiff(1:n,idx_b) # <- idx_b에서 첫 번째 숫자에 해당하는 만큼 추출
mean_diff <- mean(x[idx_b])-mean(x[idx_a])
return(mean_diff)
}
perm_diffs <- rep(0,1000) # <- 0을 천번 반복, 데이터를 저장할 박스(=perm_diffs)
for(i in 1:1000){
perm_diffs[i] = perm_fun(session_times[,'Time'],21,15)
} # <- perm_diffs에 평균값이 천개가 들어있음
mean(perm_diffs>(mean_b-mean_a))
mean_a <- mean(session_times[session_times['Page']=='Page A','Time'])
mean_b <- mean(session_times[session_times['Page']=='Page B','Time'])
perm_fun <- function(x, n1, n2){
n <- n1 + n2
idx_b <- sample(1:n,n1) #<- 1부터 n까지의 수에서 n1개를 추출
idx_a <- setdiff(1:n,idx_b) # <- idx_b에서 첫 번째 숫자에 해당하는 만큼 추출
mean_diff <- mean(x[idx_b])-mean(x[idx_a])
return(mean_diff)
}
perm_diffs <- rep(0,1000) # <- 0을 천번 반복, 데이터를 저장할 박스(=perm_diffs)
for(i in 1:1000){
perm_diffs[i] = perm_fun(session_times[,'Time'],21,15)
} # <- perm_diffs에 평균값이 천개가 들어있음
mean(perm_diffs>(mean_b-mean_a))
mean_a <- mean(session_times[session_times['Page']=='Page A','Time'])
mean_b <- mean(session_times[session_times['Page']=='Page B','Time'])
perm_fun <- function(x, n1, n2){
n <- n1 + n2
idx_b <- sample(1:n,n1) #<- 1부터 n까지의 수에서 n1개를 추출
idx_a <- setdiff(1:n,idx_b) # <- idx_b에서 첫 번째 숫자에 해당하는 만큼 추출
mean_diff <- mean(x[idx_b])-mean(x[idx_a])
return(mean_diff)
}
perm_diffs <- rep(0,1000) # <- 0을 천번 반복, 데이터를 저장할 박스(=perm_diffs)
for(i in 1:1000){
perm_diffs[i] = perm_fun(session_times[,'Time'],21,15)
} # <- perm_diffs에 평균값이 천개가 들어있음
mean(perm_diffs>(mean_b-mean_a))
mean_a <- mean(session_times[session_times['Page']=='Page A','Time'])
mean_b <- mean(session_times[session_times['Page']=='Page B','Time'])
perm_fun <- function(x, n1, n2){
n <- n1 + n2
idx_b <- sample(1:n,n1) #<- 1부터 n까지의 수에서 n1개를 추출
idx_a <- setdiff(1:n,idx_b) # <- idx_b에서 첫 번째 숫자에 해당하는 만큼 추출
mean_diff <- mean(x[idx_b])-mean(x[idx_a])
return(mean_diff)
}
perm_diffs <- rep(0,1000) # <- 0을 천번 반복, 데이터를 저장할 박스(=perm_diffs)
for(i in 1:1000){
perm_diffs[i] = perm_fun(session_times[,'Time'],21,15)
} # <- perm_diffs에 평균값이 천개가 들어있음
mean(perm_diffs>(mean_b-mean_a))
mean_a <- mean(session_times[session_times['Page']=='Page A','Time'])
mean_b <- mean(session_times[session_times['Page']=='Page B','Time'])
perm_fun <- function(x, n1, n2){
n <- n1 + n2
idx_b <- sample(1:n,n1) #<- 1부터 n까지의 수에서 n1개를 추출
idx_a <- setdiff(1:n,idx_b) # <- idx_b에서 첫 번째 숫자에 해당하는 만큼 추출
mean_diff <- mean(x[idx_b])-mean(x[idx_a])
return(mean_diff)
}
perm_diffs <- rep(0,1000) # <- 0을 천번 반복, 데이터를 저장할 박스(=perm_diffs)
for(i in 1:1000){
perm_diffs[i] = perm_fun(session_times[,'Time'],21,15)
} # <- perm_diffs에 평균값이 천개가 들어있음
mean(perm_diffs>(mean_b-mean_a))
mean_a <- mean(session_times[session_times['Page']=='Page A','Time'])
mean_b <- mean(session_times[session_times['Page']=='Page B','Time'])
perm_fun <- function(x, n1, n2){
n <- n1 + n2
idx_b <- sample(1:n,n1) #<- 1부터 n까지의 수에서 n1개를 추출
idx_a <- setdiff(1:n,idx_b) # <- idx_b에서 첫 번째 숫자에 해당하는 만큼 추출
mean_diff <- mean(x[idx_b])-mean(x[idx_a])
return(mean_diff)
}
perm_diffs <- rep(0,1000) # <- 0을 천번 반복, 데이터를 저장할 박스(=perm_diffs)
for(i in 1:1000){
perm_diffs[i] = perm_fun(session_times[,'Time'],21,15)
} # <- perm_diffs에 평균값이 천개가 들어있음
mean(perm_diffs>(mean_b-mean_a))
# -----  A/B 검정 + 분포 모델
t.test(Time ~ Page, data = session_times, alternative = "less")
df <- read.csv('four_sessions.csv', header=TRUE)
View(df)
# ----- 분산 분석 + 재표본 추출
summary(aovp(Time~Page,data = df))
# ----- 분산 분석 + 재표본 추출
summary(aovp(Time~Page,data = df))
# ----- 분산 분석 + 재표본 추출
summary(aovp(Time~Page,data = df))
# ----- 분산 분석 + 재표본 추출
summary(aovp(Time~Page,data = df))
# -----
tg = data.frame(ToothGrowth)
tg
View(session_times)
View(tg)
summary(aovp(len~supp,data = tg))
summary(aovp(len+dose~supp,data = tg))
summary(aovp(len~supp,data = tg))
tg$dose = as.factor(tg$dose)
summary(aovp(len~dose,data = tg))
summary(aov(len~dose,data = tg))
install.packages('plotly')
library(plotly)
setwd("C:/Users/JuWon/Downloads")
library(boot)
library(corrplot)
library(ggplot2)
library(dplyr)
library(tidyverse)
read.csv('house_sales.csv')
read.csv('house_sales.csv', sep= '\t')
df = read.csv('house_sales.csv', sep= '\t')
View(df)
install.packages('tidyquant')
install.packages("tidyquant")
df = read.csv('house_sales.csv', sep= '\t')
library(tidyquant)
install.packages('tidyquant')
library(tidyquant)
getSymbols("GOOG",
from = "2018-01-01",
to = "2019-12-31")
stock <- data.frame(GOOG$GOOG.Adjusted)
stock$GOOG.Adjusted <- stock$GOOG.Adjusted/stock$GOOG.Adjusted[1]
stock <- data.frame(stock,rownames(stock))
colnames(stock) <- append('GOOG','date')
fig <- plot_ly(stock, type = 'scatter', mode = 'lines')%>%
add_trace(x = ~date, y = ~GOOG, name = 'GOOG')%>%
layout(showlegend = F)
fig <- plot_ly(stock, type = 'scatter', mode = 'lines')%>%
add_trace(x = ~date, y = ~GOOG, name = 'GOOG')%>%layout(showlegend = FALSE)
fig <- plot_ly(stock, type = 'scatter', mode = 'lines')%>%
add_trace(x = ~date, y = ~GOOG, name = 'GOOG')%>%layout(showlegend = FALSE)
fig <- plot_ly(stock, type = 'scatter', mode = 'lines')%>%
add_trace(x = ~date, y = ~GOOG, name = 'GOOG')#%>%layout(showlegend = FALSE)
fig <- plot_ly(stock, type = 'scatter', mode = 'lines')%>%
add_trace(x = ~date, y = ~GOOG, name = 'GOOG')#%>%layout(showlegend = FALSE)
fig <- plot_ly(stock, type = 'scatter', mode = 'lines')%>%
add_trace(x = ~date, y = ~GOOG, name = 'GOOG')
library(plotly)
getSymbols("GOOG",
from = "2018-01-01",
to = "2019-12-31")
stock <- data.frame(GOOG$GOOG.Adjusted)
stock$GOOG.Adjusted <- stock$GOOG.Adjusted/stock$GOOG.Adjusted[1]
stock <- data.frame(stock,rownames(stock))
colnames(stock) <- append('GOOG','date')
fig <- plot_ly(stock, type = 'scatter', mode = 'lines')%>%
add_trace(x = ~date, y = ~GOOG, name = 'GOOG')%>%layout(showlegend = FALSE)
options(warn = -1)
fig <- fig %>%
layout(
xaxis = list(zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
plot_bgcolor='#e5ecf6', width = 900)
fig
fig <- plot_ly(stock, type = 'scatter', mode = 'lines')%>%
add_trace(x = ~date, y = ~GOOG, name = 'GOOG')%>%layout(showlegend = FALSE)
options(warn = -1)
fig <- fig %>%
layout(
xaxis = list(zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
plot_bgcolor='#e5ecf6', width = 900)
fig
fig <- plot_ly(stock, type = 'scatter', mode = 'lines')%>%
add_trace(x = ~date, y = ~GOOG, name = 'GOOG')%>%layout(showlegend = TRUE)
fig <- plot_ly(stock, type = 'scatter', mode = 'lines')%>%
add_trace(x = ~date, y = ~GOOG, name = 'GOOG')%>%layout(showlegend = TRUE)
options(warn = -1)
fig <- fig %>%
layout(
xaxis = list(zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
plot_bgcolor='#e5ecf6', width = 900)
fig
View(GOOG)
View(GOOG)
View(stock)
getSymbols("GOOG",
from = "2018-01-01",
to = "2019-12-31")
stock <- data.frame(GOOG$GOOG.Adjusted)
stock$GOOG.Adjusted <- stock$GOOG.Adjusted/stock$GOOG.Adjusted[1]
stock <- data.frame(stock,rownames(stock))
colnames(stock) <- append('GOOG','date')
fig <- plot_ly(stock, type = 'scatter', mode = 'lines')%>%
add_trace(x = ~date, y = ~GOOG, name = 'GOOG')%>%layout(showlegend = F)
options(warn = -1)
fig
sp500_sym <- read.csv("sp500_sectors.csv",header = TRUE)
sp500_px <- read.csv("sp500_data.csv",header = TRUE, row.names = 1)
x2 <- sp500_px[,sp500_sym[sp500_sym$sector=="health_care",'symbol']]
View(x2)
x2
View(x2)
x2$date = rownames(x2)
View(x2)
fig <- plot_ly(x2, type = 'scatter', mode = 'lines')%>%
add_trace(x = ~date, y = ~DVA, name = 'DVA')%>%layout(showlegend = F)
options(warn = -1)
fig
data = as.data.frame(apply(sp500_px, 2, cumsum))
x2 <- data[,sp500_sym[sp500_sym$sector=="health_care",'symbol']]
x2$date = rownames(x2)
fig <- plot_ly(x2, type = 'scatter', mode = 'lines')%>%
add_trace(x = ~date, y = ~DVA, name = 'DVA')%>%layout(showlegend = F)
fig
fig <- plot_ly(x2, x = ~date)
fig <- fig %>% add_lines(y = ~DVA, name = 'DVA')
fig <- fig %>% add_lines(y = ~HCA, name = 'HCA')
fig <- fig %>% add_lines(y = ~LH, name = 'LH')
fig
fig <- plot_ly(x2, x = ~date, type = 'scatter', mode = 'lines')
fig <- fig %>% add_lines(y = ~DVA, name = 'DVA')
fig <- fig %>% add_lines(y = ~HCA, name = 'HCA')
fig <- fig %>% add_lines(y = ~LH, name = 'LH')
fig
fig <- plot_ly(x2, x = ~date, type = 'scatter')
fig <- fig %>% add_lines(y = ~DVA, name = 'DVA')
fig <- fig %>% add_lines(y = ~HCA, name = 'HCA')
fig <- fig %>% add_lines(y = ~LH, name = 'LH')
fig
fig <- plot_ly(x2, x = ~date)
fig <- fig %>% add_lines(y = ~DVA, name = 'DVA')
fig <- fig %>% add_lines(y = ~HCA, name = 'HCA')
fig <- fig %>% add_lines(y = ~LH, name = 'LH')
fig
options(warn = -1)
fig
fig <- plot_ly(x2, type = 'scatter', mode = 'lines')%>%
add_trace(x = ~date, y = ~DVA, name = 'DVA')%>%layout(showlegend = F)
options(warn = -1)
fig
fig <- plot_ly(x2, type = 'scatter', mode = 'lines')%>%
add_trace(x = ~date, y = ~DVA, name = 'DVA')%>%layout(showlegend = F)
options(warn = -1)
fig
fig <- plot_ly(x2, x = ~date)
fig <- fig %>% add_lines(y = ~DVA, name = 'DVA')
fig <- fig %>% add_lines(y = ~HCA, name = 'HCA')
fig <- fig %>% add_lines(y = ~LH, name = 'LH')
fig
fig <- fig %>%
layout(
xaxis = list(zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
plot_bgcolor='#e5ecf6', width = 900)
fig
df = read.csv('house_sales.csv', sep= '\t')
View(df)
df$DocumentDate = as.Date(df$DocumentDate)
df[order(df$DocumentDate)]
df[order(df$DocumentDate),]
View(df[order(df$DocumentDate),])
df = df[order(df$DocumentDate),]
df%>% select(DocumentDate, SalePrice) %>%group_by(year) %>% summarise(mp <- mean(SalePrice))
df%>% select(DocumentDate, SalePrice) %>%group_by(DocumentDate) %>% summarise(mp <- mean(SalePrice))
library(tidyr)
library(gapminder)
library(matrixStats)
library(ggplot2)
library(dplyr)
df%>% select(DocumentDate, SalePrice) %>%group_by(DocumentDate) %>% summarise(mp <- mean(SalePrice))
df%>% select(DocumentDate, SalePrice) %>%group_by(DocumentDate) %>% summarise(msp <- mean(SalePrice))
new_df <- df%>% select(DocumentDate, SalePrice) %>%group_by(DocumentDate) %>% summarise(msp <- mean(SalePrice))
new_df
colnames(new_df) <- c('date','mean_saleprice')
new_df
fig <- plot_ly(new_df, type = 'scatter', mode = 'lines')%>%
add_trace(x = ~date, y = ~DVA, name = 'mean_saleprice')%>%layout(showlegend = F)
options(warn = -1)
fig
fig <- plot_ly(new_df, type = 'scatter', mode = 'lines')%>%
add_trace(x = ~date, y = ~mean_saleprice, name = 'mean_saleprice')%>%layout(showlegend = F)
options(warn = -1)
fig
fig <- plot_ly(x2, x = ~date)
fig <- fig %>% add_lines(y = ~DVA, name = 'DVA')
fig <- fig %>% add_lines(y = ~HCA, name = 'HCA')
fig <- fig %>% add_lines(y = ~LH, name = 'LH')
fig
colnames(df)
fig <- plot_ly(df, x = "SalePrice", y = "AdjSalePrice",type = 'scatter')
fig
fig <- plot_ly(new_df, type = 'scatter', mode = 'lines')%>%
add_trace(x = ~date, y = ~mean_saleprice, name = 'mean_saleprice')%>%layout(showlegend = F)
fig <- plot_ly(df, x = SalePrice, y = AdjSalePrice,type = 'scatter',mode = 'markers', symbol = ~NbrLivingUnits, symbols = c('circle','x','o'),
color = I('black'), marker = list(size = 10))
fig <- plot_ly(df, x = ~SalePrice, y = ~AdjSalePrice,type = 'scatter',mode = 'markers', symbol = ~NbrLivingUnits, symbols = c('circle','x','o'),
color = I('black'), marker = list(size = 10))
fig <- plot_ly(df, x = ~SalePrice, y = ~AdjSalePrice, type = 'scatter',mode = 'markers',
color = I('black'), marker = list(size = 10))
fig <- plot_ly(df, x = ~SalePrice, y = ~AdjSalePrice, type = 'scatter',mode = 'markers', symbol = ~NbrLivingUnits, symbols = c('circle','x','o'),
color = I('black'), marker = list(size = 10))
fig
fig <- plot_ly(df, x = ~SalePrice, y = ~AdjSalePrice, type = 'scatter',mode = 'markers',
color = I('black'), marker = list(size = 10))
fig
fig <- plot_ly(df, x = ~SalePrice, y = ~AdjSalePrice, type = 'scatter',mode = 'markers', marker = list(size = 10))
fig
plot_ly(df, x = ~Bedrooms, y = ~SalePrice, type = 'scatter',mode = 'markers', marker = list(size = 10))
df %>% ggplot(x = Bedrooms, y = SalePrice) + geom_boxplot()
df %>% ggplot(aes(x = Bedrooms, y = SalePrice)) + geom_boxplot()
plot_ly(df, x = ~SqFtTotLiving, y = ~SalePrice, type = 'scatter',mode = 'markers', marker = list(size = 10))
plot_ly(df, x = ~SqFtTotLiving, y = ~SalePrice, type = 'scatter',mode = 'markers', color = ~Bedrooms, colors = "Set1", marker = list(size = 10))
plot_ly(df, x = ~SqFtTotLiving, y = ~SalePrice, type = 'scatter',mode = 'markers', color = ~BldgFrade, colors = "Set1", marker = list(size = 10))
plot_ly(df, x = ~SqFtTotLiving, y = ~SalePrice, type = 'scatter',mode = 'markers', color = ~BldgGrade, colors = "Set1", marker = list(size = 10))
df$Bedrooms = as.factor(df$Bedrooms)
df %>% ggplot(aes(x = Bedrooms, y = SalePrice)) + geom_boxplot()
plot_ly(df, x = ~SqFtTotLiving, y = ~SalePrice, type = 'scatter',mode = 'markers', color = ~Bedrooms, colors = "Set1", marker = list(size = 10))
library(tidyquant)
library(plotly)
library(tidyr)
library(gapminder)
library(matrixStats)
library(ggplot2)
library(dplyr)
setwd("C:/Users/JuWon/Downloads")
library(corrplot)
library(ggplot2)
sp500_sym <- read.csv("sp500_sectors.csv",header = TRUE)
sp500_px <- read.csv("sp500_data.csv",header = TRUE, row.names = 1)
x2 <- sp500_px[,sp500_sym[sp500_sym$sector=="health_care",'symbol']]
data = as.data.frame(apply(sp500_px, 2, cumsum))
x2 <- data[,sp500_sym[sp500_sym$sector=="health_care",'symbol']]
x2$date = rownames(x2)
View(x2)
fig <- plot_ly(x2, type = 'scatter', mode = 'lines')%>%
add_trace(x = ~date, y = ~DVA, name = 'DVA')%>%layout(showlegend = F)
options(warn = -1)
fig
fig <- plot_ly(x2, x = ~date)
fig <- fig %>% add_lines(y = ~DVA, name = 'DVA')
fig <- fig %>% add_lines(y = ~HCA, name = 'HCA')
fig <- fig %>% add_lines(y = ~LH, name = 'LH')
fig
df = read.csv('house_sales.csv', sep= '\t')
df$DocumentDate = as.Date(df$DocumentDate)
df = View(df[order(df$DocumentDate),])
df = read.csv('house_sales.csv', sep= '\t')
df$DocumentDate = as.Date(df$DocumentDate)
df = df[order(df$DocumentDate),]
df
View(df)
new_df <- df%>% select(DocumentDate, SalePrice) %>%group_by(DocumentDate) %>% summarise(msp <- mean(SalePrice))
colnames(new_df) <- c('date','mean_saleprice')
new_df
fig <- plot_ly(new_df, type = 'scatter', mode = 'lines')%>%
add_trace(x = ~date, y = ~mean_saleprice, name = 'mean_saleprice')%>%layout(showlegend = F)
options(warn = -1)
fig
df$Bedrooms = as.factor(df$Bedrooms)
plot_ly(df, x = ~SqFtTotLiving, y = ~SalePrice, type = 'scatter',mode = 'markers', color = ~Bedrooms, colors = "Set1", marker = list(size = 10))
setwd("C:/Users/JuWon/Downloads")
library(corrplot)
library(ggplot2)
library(dplyr)
library(tidyquant)
library(plotly)
sp500_sym <- read.csv("sp500_sectors.csv",header = TRUE)
sp500_px <- read.csv("sp500_data.csv",header = TRUE, row.names = 1)
getSymbols("GOOG", from = "2018-01-01", to = "2019-12-31")
stock <- data.frame(GOOG$GOOG.Adjusted)
stock$GOOG.Adjusted <- stock$GOOG.Adjusted/stock$GOOG.Adjusted[1]
stock <- data.frame(stock,rownames(stock))
colnames(stock) <- append('GOOG','date')
sp500_sym <- read.csv("sp500_sectors.csv",header = TRUE)
sp500_px <- read.csv("sp500_data.csv",header = TRUE, row.names = 1)
data = as.data.frame(apply(sp500_px, 2, cumsum))
x2 <- data[,sp500_sym[sp500_sym$sector=="health_care",'symbol']]
x2$date = rownames(x2)
fig <- plot_ly(x2, type = 'scatter', mode = 'lines')%>%
add_trace(x = ~date, y = ~DVA, name = 'DVA')%>%layout(showlegend = F)
options(warn = -1)
fig
fig <- plot_ly(x2, x = ~date)
fig <- fig %>% add_lines(y = ~DVA, name = 'DVA')
fig <- fig %>% add_lines(y = ~HCA, name = 'HCA')
fig <- fig %>% add_lines(y = ~LH, name = 'LH')
fig
fig <- fig %>%
layout(
xaxis = list(zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
plot_bgcolor='#e5ecf6', width = 900)
fig
df = read.csv('house_sales.csv', sep= '\t')
df$DocumentDate = as.Date(df$DocumentDate)
df = df[order(df$DocumentDate),]
df$Bedrooms = as.factor(df$Bedrooms)
new_df <- df%>% select(DocumentDate, SalePrice) %>%
group_by(DocumentDate) %>% summarise(msp <- mean(SalePrice))
colnames(new_df) <- c('date','mean_saleprice')
fig <- plot_ly(new_df, type = 'scatter', mode = 'lines')%>%
add_trace(x = ~date, y = ~mean_saleprice, name = 'mean_saleprice')%>%layout(showlegend = F)
options(warn = -1)
fig
# ---- 4 ----
plot_ly(df, x = ~SalePrice, y = ~AdjSalePrice, type = 'scatter',mode = 'markers',
marker = list(size = 10))
# ---- 5 ----
plot_ly(df, x = ~SqFtTotLiving, y = ~SalePrice, type = 'scatter',
mode = 'markers', color = ~Bedrooms, colors = "Set1", marker = list(size = 10))
# ---- 6 ----
plot_ly(df, x = ~SqFtTotLiving, y = ~SalePrice, type = 'scatter',
mode = 'markers', color = ~BldgGrade, colors = "Set1", marker = list(size = 10))
# ---- 5 ----
plot_ly(df, x = ~SqFtTotLiving, y = ~SalePrice, type = 'scatter',
mode = 'markers', color = ~Bedrooms, colors = "Set1", marker = list(size = 10))
View(x2)
fig <- plot_ly(x2, type = 'scatter', mode = 'lines')%>%
add_trace(x = ~date, y = ~DVA, name = 'DVA')%>%layout(showlegend = F)
options(warn = -1)
fig
View(x2)
fig <- plot_ly(x2, x = ~date)
fig <- fig %>% add_lines(y = ~DVA, name = 'DVA')
fig <- fig %>% add_lines(y = ~HCA, name = 'HCA')
fig <- fig %>% add_lines(y = ~LH, name = 'LH')
fig <- fig %>%
layout(
xaxis = list(zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
plot_bgcolor='#e5ecf6', width = 900)
fig
# ---- 3 ----
df = read.csv('house_sales.csv', sep= '\t')
View(df)
df$DocumentDate = as.Date(df$DocumentDate)
df = df[order(df$DocumentDate),]
new_df <- df%>% select(DocumentDate, SalePrice) %>%
group_by(DocumentDate) %>% summarise(msp <- mean(SalePrice))
colnames(new_df) <- c('date','mean_saleprice')
new_df
plot_ly(new_df, type = 'scatter', mode = 'lines')%>%
add_trace(x = ~date, y = ~mean_saleprice, name = 'mean_saleprice')%>%layout(showlegend = F)
df$Bedrooms = as.factor(df$Bedrooms)
# ---- 5 ----
plot_ly(df, x = ~SqFtTotLiving, y = ~SalePrice, type = 'scatter',
mode = 'markers', color = ~Bedrooms, colors = "Set1", marker = list(size = 10))
# ---- 6 ----
plot_ly(df, x = ~SqFtTotLiving, y = ~SalePrice, type = 'scatter',
# ---- 6 ----
plot_ly(df, x = ~SqFtTotLiving, y = ~SalePrice, type = 'scatter',
mode = 'markers', color = ~BldgGrade, colors = "Set1", marker = list(size = 10)
)
)
# ---- 6 ----
plot_ly(df, x = ~SqFtTotLiving, y = ~SalePrice, type = 'scatter', mode = 'markers', color = ~BldgGrade, colors = "Set1", marker = list(size = 10)
)
# ---- 4 ----
plot_ly(df, x = ~SalePrice, y = ~AdjSalePrice, type = 'scatter',mode = 'markers',
marker = list(size = 10))
# ---- 6 ----
plot_ly(df, x = ~SqFtTotLiving, y = ~SalePrice, type = 'scatter', mode = 'markers', color = ~BldgGrade, colors = "Set1", marker = list(size = 10))
# ---- 6 ----
df$BldgGrade = as.factor(df$BldgGrade)
plot_ly(df, x = ~SqFtTotLiving, y = ~SalePrice, type = 'scatter', mode = 'markers', color = ~BldgGrade, colors = "Set1", marker = list(size = 10))
# ---- 7 ----
plot_ly(df, x = ~LandVal, y = ~SalePrice, type = 'scatter', mode = 'markers', color = ~BldgGrade, colors = "Set1", marker = list(size = 10))
# ---- 3 ----
df = read.csv('house_sales.csv', sep= '\t')
setwd("C:/Users/JuWon/Downloads")
# ---- 3 ----
df = read.csv('house_sales.csv', sep= '\t')
ch_ziptoll= read.csv('US_Zip_Codes_from_2013_Government_Data')
ch_ziptoll= read.csv('US_Zip_Codes_from_2013_Government_Data.csv')
View(ch_ziptoll)
temp1 = c(1,2,3)
for (i in temp1){
print(i)
}
c <- i
temp1 = c(1,2,3)
temp = c()
for (i in temp1){
c <- i
}
c
